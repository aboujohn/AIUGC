---
description:
globs:
alwaysApply: false
---
# Security & Authentication Rules

## 🔐 Authentication Requirements

- **JWT Implementation**
  - Use secure HTTP-only cookies
  - Implement proper expiration
  - Include refresh token mechanism

```typescript
// ✅ DO: Secure cookie configuration
const setAuthCookie = (res: Response, token: string) => {
  res.cookie('jwt', token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict',
    maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
  });
};

// ❌ DON'T: Use insecure storage
localStorage.setItem('auth_token', token); // Never store tokens in localStorage
```

## 🔑 API Key Management

- **Environment Variables**
  - Store all API keys in `.env` files
  - Use descriptive variable names
  - Never commit `.env` files

```typescript
// ✅ DO: Use environment variables
const apiKey = process.env.OPENAI_API_KEY;
if (!apiKey) {
  throw new Error('OpenAI API key not configured');
}

// ❌ DON'T: Hardcode API keys
const apiKey = 'sk-1234567890abcdef'; // Never do this
```

## 🛡️ Input Validation

- **Request Validation**
  - Use Zod or Joi schemas
  - Validate on both client and server
  - Sanitize all user inputs

```typescript
// ✅ DO: Implement proper validation
const userSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8).max(100),
  name: z.string().min(2).max(50)
});

const validateUser = (input: unknown) => {
  return userSchema.parse(input);
};

// ❌ DON'T: Skip validation
app.post('/api/users', (req, res) => {
  const { email, password } = req.body; // Unsafe!
});
```

## 🔒 Data Protection

- **Encryption Requirements**
  - Use TLS 1.3 for transit
  - Encrypt sensitive data at rest
  - Implement proper key rotation

```typescript
// ✅ DO: Implement encryption
const encryptData = async (data: string): Promise<string> => {
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipheriv(
    'aes-256-gcm',
    process.env.ENCRYPTION_KEY,
    iv
  );
  const encrypted = cipher.update(data, 'utf8', 'hex');
  return iv.toString('hex') + encrypted + cipher.final('hex');
};

// ❌ DON'T: Store sensitive data unencrypted
const userData = {
  ssn: '123-45-6789', // Never store sensitive data unencrypted
  creditCard: '4111-1111-1111-1111'
};
```

## 🚫 Access Control

- **RBAC Implementation**
  - Define clear role hierarchies
  - Implement permission checks
  - Use principle of least privilege

```typescript
// ✅ DO: Implement role-based checks
const requireRole = (role: string) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user || !req.user.roles.includes(role)) {
      return res.status(403).json({ error: 'Insufficient permissions' });
    }
    next();
  };
};

// ❌ DON'T: Skip permission checks
app.delete('/api/videos/:id', async (req, res) => {
  await deleteVideo(req.params.id); // Missing permission check!
});
```

## 🛑 Rate Limiting

- **API Protection**
  - Implement rate limiting
  - Use exponential backoff
  - Monitor for abuse

```typescript
// ✅ DO: Implement rate limiting
const rateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests, please try again later'
});

// ❌ DON'T: Skip rate limiting
app.post('/api/generate-video', async (req, res) => {
  // Endpoint vulnerable to abuse!
});
```

## 🔍 Security Headers

- **Required Headers**
  - CSP (Content Security Policy)
  - HSTS (HTTP Strict Transport Security)
  - XSS Protection

```typescript
// ✅ DO: Set security headers
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https://api.openai.com"]
    }
  },
  hsts: {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true
  }
}));

// ❌ DON'T: Skip security headers
app.use(express.json()); // Missing security headers!
```

## 📝 Audit Logging

- **Required Logging**
  - Authentication attempts
  - Permission changes
  - Data access patterns

```typescript
// ✅ DO: Implement audit logging
const auditLog = async (
  userId: string,
  action: string,
  details: object
) => {
  await db.auditLogs.create({
    data: {
      userId,
      action,
      details,
      timestamp: new Date(),
      ipAddress: req.ip
    }
  });
};

// ❌ DON'T: Skip audit logging
const updateUserRole = async (userId: string, newRole: string) => {
  await db.user.update({ // Missing audit log!
    where: { id: userId },
    data: { role: newRole }
  });
};
```

## ⚠️ Error Handling

- **Security Error Requirements**
  - Never expose internal errors
  - Log security incidents
  - Implement proper fallbacks

```typescript
// ✅ DO: Proper error handling
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  logger.error('Security error:', {
    error: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    user: req.user?.id,
    path: req.path
  });
  
  res.status(500).json({
    error: 'An unexpected error occurred'
  });
});

// ❌ DON'T: Expose internal errors
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  res.status(500).json({ error: err.stack }); // Never expose stack traces!
});
```

For more details on security implementation, refer to the [cursor-rules-ai-video-platform.md](mdc:cursor-rules-ai-video-platform.md) document.
